from pydrake.systems.trajectory_optimization import KinematicTrajectoryOptimization
from pydrake.solvers import Solve
from pydrake.trajectories import BsplineTrajectory
from pydrake.math import BsplineBasis, KnotVectorType
import numpy as np

class trajectoryOptimizer():
    def __init__(self, trajectory):
        '''
        trajectory: list of positions as returned from the motion planner
        '''
        self.trajectory = trajectory
        # format as array for pydrake
        self.sampleArray = np.array(trajectory).T
        # create basis object with order 3, order was chosen somewhat arbitrarily
        self.basis = BsplineBasis(3,self.sampleArray.shape[1],KnotVectorType.kClampedUniform)
        # make trajectory object to optimize
        self.pydrakeToOptimize = BsplineTrajectory(self.basis, self.sampleArray)
        # make trajectory optimization problem object
        self.trajopt = KinematicTrajectoryOptimization(self.sampleArray.shape[0], self.sampleArray.shape[1])

    def addConstraints(self):
        print('adding constraints')
        # start at motion planner trajectory start position
        self.trajopt.AddPathPositionConstraint(self.sampleArray[:,0], self.sampleArray[:,0], 0) # start at start pose
        # end at motion planner trajectory goal position
        self.trajopt.AddPathPositionConstraint(self.sampleArray[:,-1], self.sampleArray[:,-1], 1) # end at end pose
        # optimize over path length
        self.trajopt.AddPathLengthCost()

    def optimizeTrajectory(self):
        print('optimizing')
        self.trajopt.SetInitialGuess(self.pydrakeToOptimize)
        solveResult = Solve(self.trajopt.prog())
        traj = self.trajopt.ReconstructTrajectory(solveResult)
        res = traj.control_points()
        return(res)

    def restoreListOfTupleFormatting(self, pydrakeRes):
        '''
        pydrake outputs a list of np column vectors
        this returns that result as a list of tuples to 
        match the input formatting
        '''
        print('restoring original formatting')
        return [tuple(j for j in pydrakeRes[pos_i].T[0]) for pos_i in range(len(pydrakeRes))]

    
    def solveProblem(self):
        print('solving problem')
        self.addConstraints()
        result = self.optimizeTrajectory()
        formatted = self.restoreListOfTupleFormatting(result)
        return formatted


def debug():
    # example trajectory for debugging purposes
    sampleTrajectory = [(0.4456343253456998, -1.5320276140978204, -1.9407902576389715, -2.00132322069705, -0.561768691363103, 2.4220579898798205, -0.6707296283732664), (0.4456343253456998, -1.5320276140978204, -1.9407902576389715, -2.00132322069705, -0.561768691363103, 2.4220579898798205, -0.6707296283732664), [0.44590790077470643, -1.5312653276804116, -1.941089560068366, -2.0014269822835207, -0.5606234995994801, 2.4224475730037858, -0.67143411309126], [0.47037085083568897, -1.5063046224780117, -1.9515307557875738, -2.0103957418557927, -0.5269871050503161, 2.453057602172753, -0.6823419909030433], [0.484565881445997, -1.510931365082772, -1.950447244177127, -2.0146155777569854, -0.5387089106880514, 2.468810008854488, -0.6650603103424291], [0.5012504704188068, -1.5102740263644434, -1.9513949454981538, -2.0188196378067707, -0.5421837064446087, 2.48694811461921, -0.6528418752813776], [0.516266619207097, -1.5155663326128233, -1.950137733325322, -2.0214172126164502, -0.5552804688636992, 2.5018648831949672, -0.6345400907003973], [0.5345865269061747, -1.513259380831753, -1.9516992593812936, -2.02437522788116, -0.5561831498551726, 2.5203888680846207, -0.6237656347091223], [0.5512750063808509, -1.5167373088138405, -1.9511405845767535, -2.0257222444748493, -0.5666059694376258, 2.5356981530917264, -0.6069644647819015], [0.5717246854990652, -1.5112854595043694, -1.953799585714481, -2.0277017624471974, -0.5621747042595673, 2.5553662031059217, -0.5993762038975903], [0.5900528895644594, -1.5128582047891133, -1.953913955563679, -2.027855720289166, -0.5695155590935883, 2.571128364263018, -0.5843380019438587], [0.6115723641052471, -1.5070059394208422, -1.95664895296454, -2.0284709885373715, -0.5640051184835015, 2.5904770286397136, -0.5773050340700268], [0.6248744139524707, -1.5246906029793212, -1.9510366102967476, -2.024443749769403, -0.5996008297126179, 2.597032012985816, -0.5443709601800157], [0.6506562407690017, -1.509466380643641, -1.957056907169136, -2.0251950997636, -0.5775540700899278, 2.6208760991853186, -0.5475497604830291], [0.6663932874160139, -1.5227585950092493, -1.952984937160645, -2.020312401782391, -0.6061770614328421, 2.629006918509212, -0.5188090766731954], [0.6852016651502808, -1.5288005816663244, -1.951429883509348, -2.0158846511183244, -0.6220329772777431, 2.6405775298386907, -0.4980563887963485], [0.7087613141395259, -1.5227383760507942, -1.954164393041476, -2.012907313437638, -0.616031948979125, 2.658562188812802, -0.49092486714579], [0.7308964198368795, -1.5215965414182362, -1.955125773585025, -2.008315098672, -0.6188043366790597, 2.673426450671659, -0.47824732635396394], [0.7550657415417179, -1.5158051596314959, -1.9577374799654261, -2.0038974848054956, -0.6126057516702241, 2.6905254053463654, -0.47118608426970443], [0.7747712003343707, -1.5231712655361895, -1.9555996985960598, -1.9962004101251756, -0.6314151893057414, 2.699814571313077, -0.4482935559397254], [0.7966885446283944, -1.5253291154489468, -1.9552942625730363, -1.9887615302280466, -0.6403200834350966, 2.711601572767393, -0.431616467633539], [0.8164902218789338, -1.5342427082019012, -1.9524150950572756, -1.9791814979622, -0.6623257740796218, 2.7189654780633226, -0.4066979556720911], [0.8376489714307453, -1.5402333750880932, -1.9505153358782943, -1.9694176975127426, -0.6787366633271463, 2.7275109393529546, -0.3853069628577548], [0.8623409802514566, -1.5370212087870476, -1.9521062687796866, -1.96085856614107, -0.6772099167595393, 2.7411509566657664, -0.3750884743434706], [0.8872234625702227, -1.5340090295252573, -1.9536299757158773, -1.9515660913353114, -0.675704934036991, 2.7542366827111677, -0.3648729913725983], [0.9190007037182237, -1.5125359463324357, -1.9624312172456917, -1.945734908300408, -0.6354041781167794, 2.777784000096948, -0.37924286024277576], [0.9452632945270825, -1.5071370897295842, -1.9650277342204494, -1.9357037494595115, -0.6271631647013733, 2.7913205301576, -0.37347222620151177], [0.9718280322993902, -1.5015702844405543, -1.9677513689914319, -1.9250511506053467, -0.6178292136330765, 2.8044679026335277, -0.3684831209553465], [0.9931183633494527, -1.5109944589754651, -1.9644935048183592, -1.9101627169691016, -0.641370802216819, 2.80854872175214, -0.3424015598534842], [1.014727010692825, -1.5202733366024377, -1.9610814420198983, -1.8945204386431174, -0.6643377959230743, 2.8120685002359243, -0.3168616948493903], [1.0387219328998416, -1.5235675669504827, -1.9600670989922726, -1.8795753870939924, -0.6738850331153867, 2.8185965043933785, -0.29998507572458655], [1.0614425459652237, -1.5310712046570458, -1.9570837309472366, -1.862848485393278, -0.6923690398529243, 2.8220339377923223, -0.27761796014777884], [1.0847794598420908, -1.5374896007120054, -1.954410358707722, -1.845642982527286, -0.7080874109901791, 2.8255740925471176, -0.2571942123630917], [1.1118189035827157, -1.5339170228030505, -1.9563856352521212, -1.8302506802855651, -0.7013780170784081, 2.8348508567942825, -0.2508991207185849], [1.1402785669421398, -1.526899174433977, -1.9601327592412003, -1.815083687729591, -0.6859818770410961, 2.8457501688234723, -0.25021434521345043]]
    optimizer = trajectoryOptimizer(sampleTrajectory)
    result = optimizer.solveProblem()
    print(result)


if __name__ == '__main__':
    debug()